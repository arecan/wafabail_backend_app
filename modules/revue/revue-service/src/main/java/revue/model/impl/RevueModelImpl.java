/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package revue.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import revue.model.Revue;
import revue.model.RevueModel;

/**
 * The base model implementation for the Revue service. Represents a row in the &quot;WAFABAIL_Revue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RevueModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RevueImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RevueImpl
 * @generated
 */
@JSON(strict = true)
public class RevueModelImpl extends BaseModelImpl<Revue> implements RevueModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a revue model instance should use the <code>Revue</code> interface instead.
	 */
	public static final String TABLE_NAME = "WAFABAIL_Revue";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"revueId", Types.BIGINT},
		{"titre", Types.VARCHAR}, {"details", Types.VARCHAR},
		{"lien", Types.VARCHAR}, {"dateCreation", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("revueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("titre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("details", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lien", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateCreation", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table WAFABAIL_Revue (uuid_ VARCHAR(75) null,revueId LONG not null primary key,titre VARCHAR(75) null,details VARCHAR(75) null,lien VARCHAR(75) null,dateCreation DATE null)";

	public static final String TABLE_SQL_DROP = "drop table WAFABAIL_Revue";

	public static final String ORDER_BY_JPQL = " ORDER BY revue.revueId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY WAFABAIL_Revue.revueId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REVUEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RevueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _revueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRevueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _revueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Revue.class;
	}

	@Override
	public String getModelClassName() {
		return Revue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Revue, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Revue, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Revue, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Revue)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Revue, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Revue, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Revue)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Revue, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Revue, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Revue, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Revue, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Revue, Object>>();

			attributeGetterFunctions.put("uuid", Revue::getUuid);
			attributeGetterFunctions.put("revueId", Revue::getRevueId);
			attributeGetterFunctions.put("titre", Revue::getTitre);
			attributeGetterFunctions.put("details", Revue::getDetails);
			attributeGetterFunctions.put("lien", Revue::getLien);
			attributeGetterFunctions.put(
				"dateCreation", Revue::getDateCreation);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Revue, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Revue, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Revue, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Revue, String>)Revue::setUuid);
			attributeSetterBiConsumers.put(
				"revueId", (BiConsumer<Revue, Long>)Revue::setRevueId);
			attributeSetterBiConsumers.put(
				"titre", (BiConsumer<Revue, String>)Revue::setTitre);
			attributeSetterBiConsumers.put(
				"details", (BiConsumer<Revue, String>)Revue::setDetails);
			attributeSetterBiConsumers.put(
				"lien", (BiConsumer<Revue, String>)Revue::setLien);
			attributeSetterBiConsumers.put(
				"dateCreation",
				(BiConsumer<Revue, Date>)Revue::setDateCreation);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRevueId() {
		return _revueId;
	}

	@Override
	public void setRevueId(long revueId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_revueId = revueId;
	}

	@JSON
	@Override
	public String getTitre() {
		if (_titre == null) {
			return "";
		}
		else {
			return _titre;
		}
	}

	@Override
	public void setTitre(String titre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_titre = titre;
	}

	@JSON
	@Override
	public String getDetails() {
		if (_details == null) {
			return "";
		}
		else {
			return _details;
		}
	}

	@Override
	public void setDetails(String details) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_details = details;
	}

	@JSON
	@Override
	public String getLien() {
		if (_lien == null) {
			return "";
		}
		else {
			return _lien;
		}
	}

	@Override
	public void setLien(String lien) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lien = lien;
	}

	@JSON
	@Override
	public Date getDateCreation() {
		return _dateCreation;
	}

	@Override
	public void setDateCreation(Date dateCreation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateCreation = dateCreation;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Revue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Revue toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Revue>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RevueImpl revueImpl = new RevueImpl();

		revueImpl.setUuid(getUuid());
		revueImpl.setRevueId(getRevueId());
		revueImpl.setTitre(getTitre());
		revueImpl.setDetails(getDetails());
		revueImpl.setLien(getLien());
		revueImpl.setDateCreation(getDateCreation());

		revueImpl.resetOriginalValues();

		return revueImpl;
	}

	@Override
	public Revue cloneWithOriginalValues() {
		RevueImpl revueImpl = new RevueImpl();

		revueImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		revueImpl.setRevueId(this.<Long>getColumnOriginalValue("revueId"));
		revueImpl.setTitre(this.<String>getColumnOriginalValue("titre"));
		revueImpl.setDetails(this.<String>getColumnOriginalValue("details"));
		revueImpl.setLien(this.<String>getColumnOriginalValue("lien"));
		revueImpl.setDateCreation(
			this.<Date>getColumnOriginalValue("dateCreation"));

		return revueImpl;
	}

	@Override
	public int compareTo(Revue revue) {
		long primaryKey = revue.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Revue)) {
			return false;
		}

		Revue revue = (Revue)object;

		long primaryKey = revue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Revue> toCacheModel() {
		RevueCacheModel revueCacheModel = new RevueCacheModel();

		revueCacheModel.uuid = getUuid();

		String uuid = revueCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			revueCacheModel.uuid = null;
		}

		revueCacheModel.revueId = getRevueId();

		revueCacheModel.titre = getTitre();

		String titre = revueCacheModel.titre;

		if ((titre != null) && (titre.length() == 0)) {
			revueCacheModel.titre = null;
		}

		revueCacheModel.details = getDetails();

		String details = revueCacheModel.details;

		if ((details != null) && (details.length() == 0)) {
			revueCacheModel.details = null;
		}

		revueCacheModel.lien = getLien();

		String lien = revueCacheModel.lien;

		if ((lien != null) && (lien.length() == 0)) {
			revueCacheModel.lien = null;
		}

		Date dateCreation = getDateCreation();

		if (dateCreation != null) {
			revueCacheModel.dateCreation = dateCreation.getTime();
		}
		else {
			revueCacheModel.dateCreation = Long.MIN_VALUE;
		}

		return revueCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Revue, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Revue, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Revue, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Revue)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Revue>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Revue.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _revueId;
	private String _titre;
	private String _details;
	private String _lien;
	private Date _dateCreation;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Revue, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Revue)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("revueId", _revueId);
		_columnOriginalValues.put("titre", _titre);
		_columnOriginalValues.put("details", _details);
		_columnOriginalValues.put("lien", _lien);
		_columnOriginalValues.put("dateCreation", _dateCreation);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("revueId", 2L);

		columnBitmasks.put("titre", 4L);

		columnBitmasks.put("details", 8L);

		columnBitmasks.put("lien", 16L);

		columnBitmasks.put("dateCreation", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Revue _escapedModel;

}